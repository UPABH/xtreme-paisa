<style>
  :root {
    --dark: #252a2e;
    --light: #f5f5f5;
    --background: var(--light);
    --text: var(--dark);
    --border: var(--dark);
  }
  @media (prefers-color-scheme: dark) {
    :root {
      --background: var(--dark);
      --text: var(--light);
      --border: var(--light);
    }
  }

  /*	CURRENT MAX WIDTH IS JUST FOR DEMO PURPOSES */
  .tag-scrollers {
    width: 100%;
    overflow: hidden;
    margin-bottom: 100px;
  }

  /*	POSSIBLY UPDATE COLORS IN THE GRADIENT
      TO MATCH THE PROJECTS DESIGN SYSTEM
  */
  .tag-scroller {
    display: grid;
    gap: 1.5rem;
    mask: linear-gradient(90deg, #0000, var(--background) 15%, var(--background) 85%, #0000);
  }

  .tag-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
  }

  @media (prefers-reduced-motion) {
    .tag-list {
      flex-flow: row nowrap;
      overflow: auto;
      scrollbar-width: none;
      scrollbar-color: transparent transparent;
    }
    .tag-list::-webkit-scrollbar-track {
      background: transparent;
    }
    .tag-list::-webkit-scrollbar-thumb {
      background: transparent;
    }
    .tag-list::-webkit-scrollbar {
      display: none;
      width: 0;
      height: 0;
    }
  }

  .tag-list li {
    font-size: 20px;
    line-height: 1;
    padding: 0.625rem 1.375rem;
    border: 2px solid var(--border);
    border-radius: 10ch;
    white-space: nowrap;
    color: #fff;
  }

  .tag-scroller.scrolling .tag-list {
    width: max-content;
    flex-wrap: nowrap;
    animation: horizontal-scroll var(--duration) var(--direction, normal) linear infinite;
  }

  .tag-scroller.scrolling .tag-list:nth-child(even) {
    --direction: reverse;
  }

  /* PAUSING THE ANIMATION ON HOVER */
  .tag-scroller:hover .tag-list {
    animation-play-state: paused;
  }

  @keyframes horizontal-scroll {
    to {
      /*	0.75rem FOR HALF THE GAP
          OF THE .tag-scroller
      */
      transform: translateX(calc(-50% - 0.75rem));
    }
  }

  .main-heading-xp--scrollers {
    width: 100%;
    margin: 0 auto;
    color: #fff;
    text-align: center;
    margin-bottom: 30px;
  }

  @media (max-width: 990px) {
    .main-heading-xp--scrollers {
      width: 60%;
      margin: 0 auto;
      color: #fff;
      text-align: center;
      margin-bottom: 30px;
    }
  }
</style>

<div class="tag-scrollers">
  <h1 class="main-heading-xp--scrollers">Learn all skills in one course</h1>
  <div class="tag-scroller">
    <ul class="tag-list">
      <li>SEO / SEM</li>
      <li>Accessibility</li>
      <li>Consumer Insights</li>
      <li>Back-end</li>
      <li>UI</li>
      <li>CMS</li>
      <li>UX</li>
      <li>Market Research</li>
      <li>Measurement Strategy</li>
      <li>Data Architecture</li>
      <li>Online / Digital</li>
      <li>Web Analytics</li>
      <li>Display</li>
      <li>Brand Identity</li>
      <li>Front-end</li>
      <li>Product Design</li>
      <li>Omnichannel Strategy</li>
      <li>Offline / Print</li>
      <li>Audio</li>
      <li>Media Strategy</li>
      <li>POS</li>
      <li>SoMe</li>
      <li>CRM</li>
      <li>Motion Graphics</li>
      <li>OOH / DOOH</li>
      <li>Film Production</li>
      <li>Campaign Development</li>
      <li>Brand Strategy</li>
    </ul>
  </div>
</div>

<script>
  const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
  if (mediaQuery && !mediaQuery.matches) {
    const tagScroller = document.querySelector('.tag-scroller');
    const allTags = tagScroller.querySelectorAll('li');

    function createElement(tagName, className = '') {
      const elem = document.createElement(tagName);
      elem.className = className;
      return elem;
    }

    function scrollersFrom(elements, numColumns = 2) {
      const fragment = new DocumentFragment();
      elements.forEach((element, i) => {
        const column = i % numColumns;
        const children = fragment.children;
        if (!children[column]) fragment.appendChild(createElement('ul', 'tag-list'));
        children[column].appendChild(element);
      });
      return fragment;
    }
    const scrollers = scrollersFrom(allTags, 2);
    tagScroller.innerHTML = '';
    tagScroller.appendChild(scrollers);
    addScrolling();
    function addScrolling() {
      tagScroller.classList.add('scrolling');
      document.querySelectorAll('.tag-list').forEach((tagList) => {
        const scrollContent = Array.from(tagList.children);
        scrollContent.forEach((listItem) => {
          const clonedItem = listItem.cloneNode(true);
          clonedItem.setAttribute('aria-hidden', true);
          tagList.appendChild(clonedItem);
        });
        tagList.style.setProperty('--duration', tagList.clientWidth / 100 + 's');
      });
    }
  }
</script>

{% schema %}
{
  "name": "xp skills",
  "tag": "section",
  "class": "main-xp-skills",
  "settings": [],
  "presets": [
    {
      "name": "xp skills"
    }
  ]
}
{% endschema %}
